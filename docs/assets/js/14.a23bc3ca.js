(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{208:function(a,t,s){"use strict";s.r(t);var e=s(0),r=Object(e.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"recursion"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#recursion","aria-hidden":"true"}},[a._v("#")]),a._v(" Recursion")]),a._v(" "),s("blockquote",[s("p",[a._v("다음의 글을 읽어보면 좋습니다!")])]),a._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Recursive_definition",target:"_blank",rel:"noopener noreferrer"}},[a._v("재귀적 정의"),s("OutboundLink")],1)]),a._v(" "),s("li",[s("a",{attrs:{href:"https://www.geeksforgeeks.org/recursion-practice-problems-solutions/",target:"_blank",rel:"noopener noreferrer"}},[a._v("문제 모음집"),s("OutboundLink")],1)])]),a._v(" "),s("h2",{attrs:{id:"재귀란"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#재귀란","aria-hidden":"true"}},[a._v("#")]),a._v(" 재귀란?")]),a._v(" "),s("ul",[s("li",[a._v("recursive(재귀)는 자신을 정의할 때 자기 자신을 참조하는 것을 말합니다.")]),a._v(" "),s("li",[a._v("base case와 recursive case가 있습니다.")])]),a._v(" "),s("h3",{attrs:{id:"예시"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#예시","aria-hidden":"true"}},[a._v("#")]),a._v(" 예시")]),a._v(" "),s("ul",[s("li",[s("p",[a._v("팩토리얼")]),a._v(" "),s("ul",[s("li",[a._v("base case: n=0 -> 1")]),a._v(" "),s("li",[a._v("recursive case: n>=1 -> n * (n-1)!")])])]),a._v(" "),s("li",[s("p",[a._v("Binary Search (이진 검색)")])]),a._v(" "),s("li",[s("p",[a._v("그 외에도 루프로 구현한 것들을 recursive로 재구현 가능")])])]),a._v(" "),s("h2",{attrs:{id:"재귀-알고리즘을-잘-구현하기-위해서는"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#재귀-알고리즘을-잘-구현하기-위해서는","aria-hidden":"true"}},[a._v("#")]),a._v(" 재귀 알고리즘을 잘 구현하기 위해서는?")]),a._v(" "),s("ul",[s("li",[a._v("연습입니다. 최대한 많고 다양한 문제를 풀다보면 아이디어가 잘 떠오르게 됩니다.")])]),a._v(" "),s("h2",{attrs:{id:"재귀-알고리즘-분석"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#재귀-알고리즘-분석","aria-hidden":"true"}},[a._v("#")]),a._v(" 재귀 알고리즘 분석")]),a._v(" "),s("h3",{attrs:{id:"factorial"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#factorial","aria-hidden":"true"}},[a._v("#")]),a._v(" Factorial")]),a._v(" "),s("div",{staticClass:"language-java extra-class"},[s("pre",{pre:!0,attrs:{class:"language-java"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("static")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("factorial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("int")]),a._v(" n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("<")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("==")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("else")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n        "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("return")]),a._v(" n "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("*")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("fatorial")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("n"),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("-")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])])]),s("ul",[s("li",[s("code",[a._v("factorial(0)")]),a._v("의 경우 함수가 한 번만 "),s("code",[a._v("call")]),a._v("되며 "),s("code",[a._v("1")]),a._v("을 반환합니다.")]),a._v(" "),s("li",[s("code",[a._v("factorial(1)")]),a._v("의 경우 함수가 두 번 "),s("code",[a._v("call")]),a._v("되며 "),s("code",[a._v("1")]),a._v("을 반환합니다.")]),a._v(" "),s("li",[s("code",[a._v("factorial(n)")]),a._v("의 경우 함수가 "),s("code",[a._v("n+1")]),a._v("번 "),s("code",[a._v("call")]),a._v("되며 "),s("code",[a._v("(n)!")]),a._v("을 반환합니다.")]),a._v(" "),s("li",[a._v("따라서 Big-O 표기법에 따라 ( "),s("code",[a._v("O(n+1)")]),a._v(" -> )"),s("code",[a._v("O(n)")]),a._v("의 시간복잡도를 가집니다.")])]),a._v(" "),s("h3",{attrs:{id:"binary-search"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#binary-search","aria-hidden":"true"}},[a._v("#")]),a._v(" Binary Search")]),a._v(" "),s("ul",[s("li",[a._v("통상의 이진탐색 알고리즘으로 가정합니다.")]),a._v(" "),s("li",[a._v("한 번 "),s("code",[a._v("call")]),a._v("될 때 검색하고자하는 숫자의 후보들은, "),s("code",[a._v("call")]),a._v("전의 갯수가 "),s("code",[a._v("n")]),a._v("라고 가정 할 때, "),s("code",[a._v("n/2")]),a._v("만큼 줄어든다.")]),a._v(" "),s("li",[s("code",[a._v("r")]),a._v("번 시행후에 "),s("code",[a._v("n/2^r")]),a._v("만큼의 후보가 남는다.")]),a._v(" "),s("li",[s("code",[a._v("r")]),a._v("번 시행 후, 이진 탐색이 끝났을 때에는 "),s("code",[a._v("n/2^r < 1")]),a._v("을 만족하여야 한다. (그래야 후보가 하나로 좁혀지므로)")]),a._v(" "),s("li",[a._v("양변에 "),s("code",[a._v("log n")]),a._v("을 씌운다고 생각할 때, "),s("code",[a._v("r = |log n| + 1")]),a._v("을 만족한다 (|x|는 가우스 x)")]),a._v(" "),s("li",[a._v("따라서 Big-O 표기법에 따라 "),s("code",[a._v("O(log n)")]),a._v("의 시간복잡도를 가진다.")])]),a._v(" "),s("h3",{attrs:{id:"file-system"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#file-system","aria-hidden":"true"}},[a._v("#")]),a._v(" File System")]),a._v(" "),s("ul",[s("li",[s("code",[a._v("r")]),a._v("개의 파일들의 사용용량을 측정하는 알고리즘이 있다고 해보자.")]),a._v(" "),s("li",[a._v("파일은 텍스트 파일이거나 폴더 형태이다.")]),a._v(" "),s("li",[a._v("텍스트 파일일 경우에는 한 번만 파일용량을 측정한다.")]),a._v(" "),s("li",[a._v("폴더의 경우에는 하위 파일 및 폴더의 용량을 측정한다.")]),a._v(" "),s("li",[s("code",[a._v("nesting level")]),a._v("이 0인 파일부터 점점 1, 2, 3... 이런 식으로 높아진다고 이야기하자.")]),a._v(" "),s("li",[a._v("그렇다면 파일 하나당 갖고 있는 하위 파일의 갯수를 "),s("code",[a._v("n-1")]),a._v("이라하면, 자기 자신까지 총 "),s("code",[a._v("n")]),a._v("번 용량을 측정하는 함수를 "),s("code",[a._v("call")]),a._v("하게 된다.")]),a._v(" "),s("li",[a._v("따라서 "),s("code",[a._v("O(n)")]),a._v("이다.")])])])}),[],!1,null,null,null);t.default=r.exports}}]);